多线程的实现
1.继承Thread类（不推荐，Java有单继承性）
2.实现Runable接口
public class Web12306 implements Runnable{
    private int ticketNums=99;
    @Override
    public void run() {

        while (true){
            if(ticketNums<0){
                break;
            }
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(Thread.currentThread().getName()+ticketNums--);
        }
    }

    public static void main(String[] args) {
        //一份资源
        Web12306 web=new Web12306();
//多个进程
        new Thread(web,"王").start();
        new Thread(web,"胡").start();
        new Thread(web,"我").start();


    }
}
3.实现Callable接口
 Racer racer = new Racer();
        //创建执行服务
        ExecutorService ser = Executors.newFixedThreadPool(2);
        //提交执行
        Future<Integer> result1 = (Future<Integer>) ser.submit(racer);
        Future<Integer> result2 = (Future<Integer>) ser.submit(racer);

        //获取结果


        Integer r1 =  result1.get();
        Integer r2 =  result2.get();
        System.out.println(r1 + "---" + r2);


        //关闭服务
        ser.shutdown();
    }
lambda表达式 防止存在多个匿名内部类
public class lambdaTest {
    //内部类
    static class Like2 implements ILike{

        @Override
        public void lambda() {
            System.out.println("I like lambda");
        }
    }
    public static void main(String[] args) {

    Iadd add=a->a;//仅有一行代码可以省略大括号
        System.out.println(add.add(6));

        ILike like=new Like();
        like.lambda();
        new Like2().lambda();
         like =new ILike() {
             @Override
             public void lambda() {
                 System.out.println("I like lambda3");
             }
         };
         like.lambda();
        like=()->{
            System.out.println("I like lambda4");
        };
        like.lambda();
    }
}
interface ILike{
    void lambda();
}
class Like implements ILike{

    @Override
    public void lambda() {
        System.out.println("I like lambda");
    }
}

interface Iadd{
    int add(int a );
}



静态代理
public class StaticProxy {
    public static void main(String[] args) {
        new WeddingCompany(new You()).happyMerry();

    }
}
interface Merry{
    void happyMerry();
}
//真实角色
class You implements Merry{

    @Override
    public void happyMerry() {
        System.out.println("我结婚啦~~~~~");
    }
}
//代理角色
class WeddingCompany implements Merry{
    //真实角色
        private Merry target;
      public  WeddingCompany(Merry target){
          this.target=target;
      }
    @Override
    public void happyMerry() {
          ready();
          this.target.happyMerry();
          end();
    }
    private void ready(){
        System.out.println("准备猪窝-----");
    }
    private void end(){
        System.out.println("洞房~~~~~~~~");
    }
}

